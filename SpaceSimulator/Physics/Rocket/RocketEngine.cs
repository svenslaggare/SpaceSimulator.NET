using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SpaceSimulator.Physics.Rocket
{
    /// <summary>
    /// Represents a rocket engine
    /// </summary>
    public class RocketEngine
    {
        /// <summary>
        /// The number of engines
        /// </summary>
        public int NumberOfEngines { get; }

        /// <summary>
        /// The amount of thrust generated by the engine (in newtons)
        /// </summary>
        public double Thrust { get; }

        /// <summary>
        /// The specific impulse (in seconds)
        /// </summary>
        public double SpecificImpulse { get; }

        /// <summary>
        /// The initial total mass (in kg)
        /// </summary>
        public double InitialTotalMass { get; }

        /// <summary>
        /// The amount of mass dedicated to fuel (in kg)
        /// </summary>
        public double FuelMass { get; }

        /// <summary>
        /// The dry mass (in kg)
        /// </summary>
        public double DryMass { get; }

        /// <summary>
        /// Creates a new rocket engine
        /// </summary>
        /// <param name="numberOfEngines">The number of engines</param>
        /// <param name="thrust">The thrust (in newtons)</param>
        /// <param name="specificImpulse">The specific impulse (in seconds)</param>
        /// <param name="dryMass">The dry mass (total mass - fuel mass) (in kg)</param>
        /// <param name="fuelMass">The fuel mass (in kg)</param>
        public RocketEngine(int numberOfEngines, double thrust, double specificImpulse, double dryMass, double fuelMass)
        {
            this.NumberOfEngines = numberOfEngines;
            this.Thrust = thrust;
            this.SpecificImpulse = specificImpulse;
            this.InitialTotalMass = dryMass + fuelMass;
            this.DryMass = dryMass;
            this.FuelMass = fuelMass;
        }

        /// <summary>
        /// Creates a new rocket engine with the given burn time
        /// </summary>
        /// <param name="numberOfEngines">The number of engines</param>
        /// <param name="thrust">The thrust (in newtons)</param>
        /// <param name="specificImpulse">The specific impulse (in seconds)</param>
        /// <param name="dryMass">The dry mass (total mass - fuel mass) (in kg)</param>
        /// <param name="burnTime">The burn time</param>
        public static RocketEngine CreateFromBurnTime(int numberOfEngines, double thrust, double specificImpulse, double dryMass, double burnTime)
        {
            return new RocketEngine(numberOfEngines, thrust, specificImpulse, dryMass, numberOfEngines * burnTime * RocketFormulas.CalculateMassFlowRate(thrust, specificImpulse));
        }

        /// <summary>
        /// Returns the mass flow rate (kg/s)
        /// </summary>
        public double MassFlowRate
        {
            get { return RocketFormulas.CalculateMassFlowRate(this.Thrust, this.SpecificImpulse); }
        }

        /// <summary>
        /// Returns the total amount of thrust generated by all engines (in newtons)
        /// </summary>
        public double TotalThrust
        {
            get { return this.Thrust * this.NumberOfEngines; }
        }

        /// <summary>
        /// Returns the total mass flow rate of all the engines (in kg/s)
        /// </summary>
        public double TotalMassFlowRate
        {
            get { return this.MassFlowRate * this.NumberOfEngines; }
        }

        /// <summary>
        /// Returns the effective exhaust velocity
        /// </summary>
        public double EffectiveExhaustVelocity
        {
            get { return this.SpecificImpulse * Constants.StandardGravity; }
        }
    }
}
